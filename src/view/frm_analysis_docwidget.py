# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QRiSDockWidget
                                 A QGIS plugin
 QGIS Riverscapes Studio (QRiS)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-05-06
        git sha              : $Format:%H$
        copyright            : (C) 2021 by North Arrow Research
        email                : info@northarrowresearch.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from re import S
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from qgis import core, gui, utils

# from qgis.core import QgsMapLayer
# from qgis.gui import QgsDataSourceSelectDialog
# from qgis.utils import iface

from ..model.project import Project
from ..model.mask import MASK_MACHINE_CODE
from ..model.analysis import ANALYSIS_MACHINE_CODE, Analysis
from ..model.db_item import DB_MODE_CREATE, DB_MODE_IMPORT, DBItem, DBItemModel
from ..model.event import EVENT_MACHINE_CODE, Event
from ..model.basemap import BASEMAP_MACHINE_CODE, Raster
from ..model.mask import MASK_MACHINE_CODE, Mask


class FrmAnalysisDocWidget(QtWidgets.QDockWidget):

    def __init__(self, parent=None):

        super(FrmAnalysisDocWidget, self).__init__(parent)
        self.setupUi()

    def configure_analysis(self, project: Project, analysis: Analysis, event: Event):

        self.project = project
        self.analyis = analysis
        self.txtName.text = analysis.name

        with sqlite3.connect(project.project_file) as conn:
            curs = conn.cursor()
            curs.execute('SELECT DISTINCT fid, display_label FROM mask_features WHERE mask_id = ?', [analysis.mask.id])
            segments = {row[0]: DBItem('None', row[0], row[1]) for row in curs.fetchall()}
            self.segments_model = DBItemModel(segments)
            self.cboSegment.setModel(self.segments_model)

        # Events
        self.events_model = DBItemModel(project.events)
        self.cboEvent.setModel(self.events_model)

    def setupUi(self):

        self.setWindowTitle('QRiS Analysis')
        self.dockWidgetContents = QtWidgets.QWidget()

        self.vert = QtWidgets.QVBoxLayout(self.dockWidgetContents)
        # self.setLayout(self.vert)

        self.grid = QtWidgets.QGridLayout()
        self.vert.addLayout(self.grid)

        self.lblName = QtWidgets.QLabel()
        self.lblName.setText('Analysis Name')
        self.grid.addWidget(self.lblName, 0, 0, 1, 1)

        self.txtName = QtWidgets.QLineEdit()
        self.txtName.setMaxLength(255)
        self.grid.addWidget(self.txtName, 0, 1, 1, 1)

        self.lblSegment = QtWidgets.QLabel()
        self.lblSegment.setText('Riverscape Segment')
        self.grid.addWidget(self.lblSegment, 1, 0, 1, 1)

        self.cboSegment = QtWidgets.QComboBox()
        self.grid.addWidget(self.cboSegment, 1, 1, 1, 1)

        self.lblEvent = QtWidgets.QLabel()
        self.lblEvent.setText('Data Capture Event')
        self.grid.addWidget(self.lblEvent, 2, 0, 1, 1)

        self.cboEvent = QtWidgets.QComboBox()
        self.grid.addWidget(self.cboEvent, 2, 1, 1, 1)

        self.horiz = QtWidgets.QHBoxLayout()
        self.vert.addLayout(self.horiz)

        self.spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horiz.addItem(self.spacerItem)

        self.cmdCalculate = QtWidgets.QPushButton()
        self.cmdCalculate.setText('Calculate')
        self.horiz.addWidget(self.cmdCalculate)

        self.cmdSettings = QtWidgets.QPushButton()
        self.cmdSettings.setText('Settings')
        self.horiz.addWidget(self.cmdSettings)

        self.table = QtWidgets.QTableWidget()
        self.vert.addWidget(self.table)

        self.setWidget(self.dockWidgetContents)
