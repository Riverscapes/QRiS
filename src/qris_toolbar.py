# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QRiS
                                 A QGIS plugin
 QGIS Riverscapes Studio (QRiS)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-06
        git sha              : $Format:%H$
        copyright            : (C) 2021 by North Arrow Research
        email                : info@northarrowresearch.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys
import subprocess
import os.path
import requests
import tempfile
import webbrowser
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QSettings, QUrl
from qgis.PyQt.QtGui import QIcon, QDesktopServices
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QDialog, QToolButton, QMenu
from qgis.core import QgsApplication
from qgis.gui import QgsMapToolEmitPoint

# TODO fix this
from .gp.provider import Provider
from .QRiS.settings import Settings
from .QRiS.settings import CONSTANTS
from .gp.watershed_attribute_api import QueryMonster


# TODO determine if this is needed
# Initialize Qt resources from file resources.py
from . import resources

# Import the code for the DockWidget
from .view.frm_dockwidget import QRiSDockWidget
from .view.frm_new_project import FrmNewProject
from .view.frm_about import FrmAboutDialog

from .model.project import apply_db_migrations


ORGANIZATION = 'Riverscapes'
APPNAME = 'QRiS'
LAST_PROJECT_FOLDER = 'last_project_folder'


class QRiSToolbar:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RIPT_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QGIS Riverscapes Studio (QRiS)')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'QRiS')
        self.toolbar.setObjectName(u'QRiS')

        self.settings = Settings(iface=self.iface)

        # print "** INITIALIZING RIPT"

        # Populated on load from a URL
        self.acknowledgements = None

        self.pluginIsActive = False
        self.dockwidget = None

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QRiS', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    # TODO Remove this I don't think it is needed
    def initProcessing(self):
        self.provider = Provider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # Initialize the processing framework
        self.initProcessing()

        icon_path = ':/plugins/qris_toolbar/riverscapes_icon'
        self.add_action(
            icon_path,
            text=self.tr(u'QRiS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.newProjectAction = QAction(QIcon(':/plugins/qris_toolbar/new'), self.tr(u'New QRiS Project'), self.iface.mainWindow())
        self.newProjectAction.triggered.connect(self.create_new_project_dialog)
        self.toolbar.addAction(self.newProjectAction)

        self.open_projectAction = QAction(QIcon(':/plugins/qris_toolbar/folder'), self.tr(u'Open QRiS Project'), self.iface.mainWindow())
        self.open_projectAction.triggered.connect(self.open_existing_project)
        self.toolbar.addAction(self.open_projectAction)

        # self.addLayerAction = QAction(QIcon(':/plugins/qris_toolbar/AddToMap.png'), self.tr(u'new RIPT Project'), self.iface.mainWindow())
        # self.addLayerAction.triggered.connect(self.addLayerDlg)
        # self.addLayerAction.setEnabled(False)
        # self.toolbar.addAction(self.addLayerAction)

        # Watershed Attribute Map Click
        # self.watershed_attribute_action = QAction(QIcon(':/plugins/qris_toolbar/watershed'), self.tr(u'Watershed Attribute Tool'), self.iface.mainWindow())
        # self.watershed_attribute_action.triggered.connect(self.activate_watershed_attributes)
        # self.toolbar.addAction(self.watershed_attribute_action)

        canvas = self.iface.mapCanvas()
        self.watershed_html_tool = QgsMapToolEmitPoint(canvas)
        self.watershed_html_tool.canvasClicked.connect(self.html_watershed_metrics)

        self.watershed_json_tool = QgsMapToolEmitPoint(canvas)
        self.watershed_json_tool.canvasClicked.connect(self.json_watershed_metrics)

        self.configure_watershed_attribute_menu()
        self.configure_help_menu()

    # --------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # print "** CLOSING RIPT"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # Need to de-initialize the processing framework
        QgsApplication.processingRegistry().removeProvider(self.provider)

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QGIS Riverscapes Studio (QRiS)'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar
        del self.dockwidget

    # --------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # print "** STARTING RIPT"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget is None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = QRiSDockWidget()
                self.dockwidget.iface = self.iface

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def open_existing_project(self):
        """
        Browse for a project directory
        :return:
        """

        settings = QSettings(ORGANIZATION, APPNAME)
        last_project_folder = settings.value(LAST_PROJECT_FOLDER)

        dialog_return = QFileDialog.getOpenFileName(self.dockwidget, "Open Existing QRiS Project", last_project_folder, self.tr("QRiS Project Files (qris_project.gpkg)"))
        if dialog_return is not None and dialog_return[0] != '' and os.path.isfile(dialog_return[0]):

            settings = QSettings(ORGANIZATION, APPNAME)
            settings.setValue(LAST_PROJECT_FOLDER, os.path.dirname(dialog_return[0]))
            settings.sync()

            # Apply database migrations to ensure latest schema
            self.update_database(dialog_return[0])

            self.toggle_widget(forceOn=True)
            self.dockwidget.build_tree_view(dialog_return[0])

            # We set the project path in the project settings. This way it will be saved with the QgsProject file
            # if self.dockwidget is None or self.dockwidget.isHidden() is True:
            #     # self.toggle_widget(forceOn=True)
            #     project = QRiSProject()
            #     project.load_project_file(dialog_return[0])
            #     self.open_project(project)

    def create_new_project_dialog(self):

        settings = QSettings(ORGANIZATION, APPNAME)
        last_parent_folder = os.path.dirname(settings.value(LAST_PROJECT_FOLDER)) if settings.value(LAST_PROJECT_FOLDER) is not None else None

        dialog_return = QFileDialog.getExistingDirectory(self.dockwidget, 'Create New QRiS Project', last_parent_folder)
        if len(dialog_return) > 0:
            self.save_folder = dialog_return
            frm_new_project = FrmNewProject(dialog_return)
            result = frm_new_project.exec_()
            if result == QDialog.Accepted:
                settings.setValue(LAST_PROJECT_FOLDER, frm_new_project.project_dir)
                settings.sync()

                # Apply database migrations to ensure latest schema
                self.update_database(frm_new_project.txtPath.text())

                self.toggle_widget(forceOn=True)
                self.dockwidget.build_tree_view(frm_new_project.txtPath.text())

        # if qris_project is not None:
        #     # We set the proect path in the project settings. This way it will be saved with the QgsProject file
        #     if self.dockwidget is None or self.dockwidget.isHidden() is True:
        #         self.toggle_widget(forceOn=True)

    def activate_html_watershed_attributes(self):

        canvas = self.iface.mapCanvas()
        canvas.setMapTool(self.watershed_html_tool)

    def activate_json_watershed_attributes(self):

        canvas = self.iface.mapCanvas()
        canvas.setMapTool(self.watershed_json_tool)

    def json_watershed_metrics(self, point, button):
        """
        Display the watershed attribute results based on the point that the user clicked on the map
        """

        try:
            json_data = self.get_watershed_metrics(point.x(), point.y())
            if json_data is not None:
                file_path = QFileDialog.getSaveFileName(None, 'Watershed Metrics JSON File', None, 'JSON Files (*.json)')
                if file_path is not None and file_path[0] != '':
                    with open(file_path[0], 'w') as f:
                        f.write(json_data)
                    # QDesktopServices.openUrl(QUrl('file://' + file_path[0]))
                    webbrowser.open('file://' + file_path[0])
        except Exception as ex:
            QMessageBox.warning(None, 'Error Retrieving Watershed Metrics', str(ex))

    def html_watershed_metrics(self, point, button):
        """
        Display the watershed attribute results based on the point that the user clicked on the map
        """

        try:
            json_data = self.get_watershed_metrics(point.x(), point.y())
            if json_data is not None:
                tmp_file = tempfile.NamedTemporaryFile(delete=False).name + '.html'
                with open(tmp_file, 'w') as f:
                    f.write(f'<html><body><h1>{json_data}</h1></body></html>')
                webbrowser.open('file://' + tmp_file)
        except Exception as ex:
            QMessageBox.warning(None, 'Error Retrieving Watershed Metrics', str(ex))

    def get_watershed_metrics(self, lng: float, lat: float):

        # Call watershed attribute API with coordinates
        api = QueryMonster(CONSTANTS['watershedAttributeApiUrl'], CONSTANTS['watershedAttributeApiKey'])
        response = api.run_query("""
            query project_query($lat: Float!, $lng: Float!) {
                pointMetrics(lat: $lat, lng: $lng) {
                    HUC12 {
                    id
                    name
                    }
                    upstreamMetrics
                }
            }""", {"lng": lng, "lat": lat})

        return response.json if response is not None else None

    def update_database(self, db_path):
        try:
            apply_db_migrations(db_path)
        except Exception as ex:
            QMessageBox.warning(self, 'Error Appling QRiS Database Migrations', str(ex))

    def toggle_widget(self, forceOn=False):
        """Toggle the widget open and closed when clicking the toolbar"""
        if not self.pluginIsActive:
            self.pluginIsActive = True

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget is None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = QRiSDockWidget()
                # self.metawidget = RIPTMetaWidget()
                # Hook metadata changes up to the metawidget
                # self.dockwidget.metaChange.connect(self.metawidget.load)

                # Run a network sync operation to get the latest stuff. Don't force it.
                #  This is just a quick check
                # self.net_sync_load()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            # self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.metawidget)
            self.dockwidget.show()

        else:
            if self.dockwidget is not None:
                if self.dockwidget.isHidden():
                    self.dockwidget.show()
                elif forceOn is False:
                    self.dockwidget.hide()

    def configure_watershed_attribute_menu(self):

        self.wat_button = QToolButton()
        self.wat_button.setToolButtonStyle(Qt.ToolButtonIconOnly)
        self.wat_button.setMenu(QMenu())
        self.wat_button.setPopupMode(QToolButton.MenuButtonPopup)
        m = self.wat_button.menu()

        self.wat_button = QToolButton()
        self.wat_button.setToolButtonStyle(Qt.ToolButtonTextOnly)
        wat_menu = QMenu()
        self.wat_button.setMenu(wat_menu)
        self.wat_button.setPopupMode(QToolButton.MenuButtonPopup)

        self.wat_html_action = QAction(QIcon(':/plugins/qris_toolbar/watershed'), self.tr('Export Attributes to HTML Report'), self.iface.mainWindow())
        self.wat_html_action.triggered.connect(self.activate_html_watershed_attributes)
        wat_menu.addAction(self.wat_html_action)

        self.wat_json_action = QAction(QIcon(':/plugins/qris_toolbar/json'), self.tr('Export Attributes to JSON'), self.iface.mainWindow())
        self.wat_json_action.triggered.connect(self.activate_json_watershed_attributes)
        wat_menu.addAction(self.wat_json_action)

        self.wat_button.setDefaultAction(self.wat_html_action)
        self.toolbar.addWidget(self.wat_button)

    def configure_help_menu(self):

        self.wat_button = QToolButton()
        self.wat_button.setToolButtonStyle(Qt.ToolButtonTextOnly)
        self.wat_button.setMenu(QMenu())
        self.wat_button.setPopupMode(QToolButton.MenuButtonPopup)

        m = self.wat_button.menu()

        # TODO: get the local help working
        # self.helpAction = QAction(
        #     QIcon(':/plugins/qris_toolbar/Help.png'),
        #     self.tr('Help'),
        #     self.iface.mainWindow()
        # )
        # self.helpAction.triggered.connect(partial(showPluginHelp, None, filename=':/plugins/qris_toolbar/help/build/html/index'))
        # self.websiteAction = QAction(
        #     QIcon(':/plugins/qris_toolbar/RaveAddIn_16px.png'),
        #     self.tr('Website'),
        #     self.iface.mainWindow()
        # )
        # self.websiteAction.triggered.connect(lambda: QDesktopServices.openUrl(QUrl("http://rave.riverscapes.xyz")))

        self.helpAction = QAction(
            QIcon(':/plugins/qris_toolbar/help'),
            self.tr('Help'),
            self.iface.mainWindow()
        )
        self.helpAction.triggered.connect(lambda: QDesktopServices.openUrl(QUrl("https://riverscapes.github.io/QRiS/")))

        # self.raveOptionsAction = QAction(
        #     QIcon(':/plugins/qris_toolbar/Options.png'),
        #     self.tr('Settings'),
        #     self.iface.mainWindow()
        # )
        # self.raveOptionsAction.triggered.connect(self.options_load)

        # self.net_sync_action = QAction(
        #     QIcon(':/plugins/qris_toolbar/refresh.png'),
        #     self.tr('Update resources'),
        #     self.iface.mainWindow()
        # )
        # self.net_sync_action.triggered.connect(lambda: self.net_sync_load(force=True))

        # self.find_resources_action = QAction(
        #     QIcon(':/plugins/qris_toolbar/BrowseFolder.png'),
        #     self.tr('Find Resources folder'),
        #     self.iface.mainWindow()
        # )
        # self.find_resources_action.triggered.connect(self.locateResources)

        self.about_action = QAction(
            QIcon(':/plugins/qris_toolbar/riverscapes_icon'),
            self.tr('About QRiS'),
            self.iface.mainWindow()
        )
        self.about_action.triggered.connect(self.about_load)

        m.addAction(self.helpAction)
        # m.addAction(self.websiteAction)
        # m.addAction(self.raveOptionsAction)
        # m.addAction(self.net_sync_action)
        # m.addSeparator()
        # m.addAction(self.find_resources_action)
        m.addAction(self.about_action)
        self.wat_button.setDefaultAction(self.helpAction)

        self.toolbar.addWidget(self.wat_button)

    def about_load(self):
        """
        Open the About dialog
        """
        dialog = FrmAboutDialog()
        if self.acknowledgements is None:
            self.acknowledgements = requests.get('https://riverscapes.github.io/QRiS/dotnetack.html').text

        dialog.acknowledgements.setText(self.acknowledgements)
        dialog.exec_()
