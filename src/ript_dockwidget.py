# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RIPTDockWidget
                                 A QGIS plugin
 Riverscapes Integrated Planning Tool (RIPT)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-05-06
        git sha              : $Format:%H$
        copyright            : (C) 2021 by North Arrow Research
        email                : info@northarrowresearch.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.core import QgsRasterLayer, QgsProject, QgsColorRampShader, QgsRasterShader, QgsSingleBandPseudoColorRenderer
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtWidgets import QAbstractItemView, QFileDialog
from qgis.PyQt.QtCore import pyqtSignal, Qt
from qgis.PyQt.QtGui import QStandardItemModel, QStandardItem, QIcon, QColor

from .classes.context_menu import ContextMenu
from .ript_elevation_dockwidget import RIPTElevationDockWidget
from .add_detrended_dialog import AddDetrendedRasterDlg
from .classes.settings import Settings

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui', 'ript_dockwidget_base.ui'))

item_code = {'path': Qt.UserRole + 1,
             'item_type': Qt.UserRole + 2,
             'RASTER': Qt.UserRole + 3}


class RIPTDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(RIPTDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.settings = Settings()

        self.current_project = None
        self.menu = ContextMenu()

        self.treeView.setContextMenuPolicy(Qt.CustomContextMenu)
        self.treeView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.treeView.customContextMenuRequested.connect(self.open_menu)
        # self.treeView.doubleClicked.connect(self.default_tree_action)
        # self.treeView.clicked.connect(self.item_change)

        # self.treeView.expanded.connect(self.expand_tree_item)

        self.model = QStandardItemModel()
        self.treeView.setModel(self.model)

    def openProject(self, ript_project):

        self.current_project = ript_project

        self.model.clear()
        rootNode = self.model.invisibleRootItem()

        ript_name = QStandardItem(ript_project.project_name)
        ript_name.setIcon(QIcon(':/plugins/ript_toolbar/RaveAddIn_16px.png'))
        rootNode.appendRow(ript_name)

        detrended_rasters = QStandardItem("Detrended Rasters")
        detrended_rasters.setIcon(QIcon(':/plugins/ript_toolbar/BrowseFolder.png'))
        detrended_rasters.setData("DetrendedRasters", item_code['item_type'])
        ript_name.appendRow(detrended_rasters)

        for raster in ript_project.detrended_rasters:
            detrended_raster = QStandardItem(raster.name)
            detrended_raster.setIcon(QIcon(':/plugins/ript_toolbar/layers/Raster16.png'))
            detrended_raster.setData(raster.path, item_code['path'])
            detrended_raster.setData('DetrendedRaster', item_code['item_type'])
            detrended_raster.setData(raster, item_code['RASTER'])
            detrended_rasters.appendRow(detrended_raster)

            # for surface in raster

        project_layers = QStandardItem("Project Layers")
        project_layers.setIcon(QIcon(':/plugins/ript_toolbar/BrowseFolder.png'))
        ript_name.appendRow(project_layers)

        for project_layer in ript_project.project_layers:
            layer = QStandardItem(project_layer.name)
            layer.setData(project_layer.path, item_code['path'])
            layer.appendRow(project_layers)

    def closeEvent(self, event):
        self.current_project = None
        self.closingPlugin.emit()
        event.accept()

    def open_menu(self, position):

        self.menu.clear()

        indexes = self.treeView.selectedIndexes()
        if len(indexes) < 1:
            return

        # No multiselect so there is only ever one item
        idx = indexes[0]

        if not idx.isValid():
            return

        item = self.model.itemFromIndex(indexes[0])
        # item_type = item.data(data_code['item_type'])
        # project_tree_data = item.data(Qt.UserRole)  # ProjectTreeData object
        # data = project_tree_data.data  # Could be a QRaveBaseMap, a QRaveMapLayer or just some random data

        if item.text() == "Detrended Rasters":
            self.menu.clear()
            self.menu.addAction('ADD_DETRENDED_RASTER', lambda: self.addDetrendedRasterToProject())
        elif item.data(item_code['item_type'] == "Detrended Raster"):
            self.menu.clear()
            self.menu.addAction('EXPLORE_ELEVATIONS', lambda: self.exploreElevations(item))

        # This is the layer context menu
        # if isinstance(data, QRaveMapLayer):
        #     if data.layer_type == QRaveMapLayer.LayerTypes.WEBTILE:
        #         self.basemap_context_menu(idx, item, project_tree_data)
        #     elif data.layer_type in [QRaveMapLayer.LayerTypes.FILE, QRaveMapLayer.LayerTypes.REPORT]:
        #         self.file_layer_context_menu(idx, item, project_tree_data)
        #     else:
        #         self.map_layer_context_menu(idx, item, project_tree_data)

        # elif isinstance(data, QRaveBaseMap):
        #     # A WMS QARaveBaseMap is just a container for layers
        #     if data.tile_type == 'wms':
        #         self.folder_dumb_context_menu(idx, item, project_tree_data)
        #     # Every other kind of basemap is an add-able layer
        #     else:
        #         self.basemap_context_menu(idx, item, project_tree_data)

        # elif project_tree_data.type == QRaveTreeTypes.PROJECT_ROOT:
        #     self.project_context_menu(idx, item, project_tree_data)

        # elif project_tree_data.type in [
        #     QRaveTreeTypes.PROJECT_VIEW_FOLDER,
        #     QRaveTreeTypes.BASEMAP_ROOT,
        #     QRaveTreeTypes.BASEMAP_SUPER_FOLDER
        # ]:
        #     self.folder_dumb_context_menu(idx, item, project_tree_data)

        # elif project_tree_data.type in [
        #     QRaveTreeTypes.PROJECT_FOLDER,
        #     QRaveTreeTypes.PROJECT_REPEATER_FOLDER,
        #     QRaveTreeTypes.BASEMAP_SUB_FOLDER
        # ]:
        #     self.folder_context_menu(idx, item, project_tree_data)

        # elif project_tree_data.type == QRaveTreeTypes.PROJECT_VIEW:
        #     self.view_context_menu(idx, item, project_tree_data)

        self.menu.exec_(self.treeView.viewport().mapToGlobal(position))

    def addDetrendedRasterToProject(self):

        # last_browse_path = self.settings.getValue('lastBrowsePath')
        # last_dir = os.path.dirname(last_browse_path) if last_browse_path is not None else None

        dialog_return = QFileDialog.getOpenFileName(None, "Add Detrended Raster to RIPT project", None, self.tr("Raster Data Sources (*.tif)"))
        if dialog_return is not None and dialog_return[0] != "" and os.path.isfile(dialog_return[0]):
            self.addDetrendedDlg = AddDetrendedRasterDlg(None, dialog_return[0], self.current_project)
            self.addDetrendedDlg.dataChange.connect(self.openProject)
            self.addDetrendedDlg.exec()

    def exploreElevations(self, selected_item):

        raster = selected_item.data(item_code['RASTER'])

        self.elevation_widget = RIPTElevationDockWidget(raster, self.current_project)
        self.settings.iface.addDockWidget(Qt.LeftDockWidgetArea, self.elevation_widget)
        self.elevation_widget.show()

        return
